---
// Scatola del Tempo per Leone
import { createUrl, createAssetUrl } from '../utils/urls';

// Calcola l'URL del favicon
const faviconUrl = createAssetUrl('/favicon.svg');
---

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scatola del Tempo per Leone</title>
    <link rel="icon" type="image/svg+xml" href={faviconUrl}>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
    <link rel="stylesheet" href="/global.css" />
    <style is:global>
        .main-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            max-width: 800px;
            width: 100%;
            margin-bottom: 2rem;
        }

        .intro-text {
            text-align: center;
            margin-bottom: 2rem;
            color: #333;
            font-size: 1.1rem;
            line-height: 1.6;
        }

        .add-message-btn {
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 2rem;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: block;
            margin: 0 auto 2rem auto;
            position: relative;
        }

        .add-message-btn:hover {
            background: linear-gradient(135deg, #388e3c, #689f38);
            transform: translateY(-2px);
        }

        .add-message-btn i {
            margin-right: 0.5rem;
        }

        .messages-container {
            display: grid;
            gap: 2rem;
            margin-top: 2rem;
        }

        /* FORCE UPDATE - SUPER ELABORATE CARDS v2.0 */
        .message-card {
            border-radius: 1.2rem;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(33,150,243,0.08);
            transition: box-shadow 0.2s;
            position: relative;
            overflow: hidden;
            margin-bottom: 1.5rem;
        }

        .message-card:hover {
            box-shadow: 0 4px 16px rgba(33,150,243,0.12);
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e0e0e0;
        }

        .message-author {
            font-weight: 700;
            color: #1976d2;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .message-date {
            color: #1976d2;
            font-size: 0.95rem;
            background: #bbdefb;
            padding: 0.4rem 1rem;
            border-radius: 1rem;
        }

        .message-content {
            margin-top: 1rem;
            font-size: 1.08rem;
            color: #333;
            line-height: 1.6;
        }

        .loading {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 2rem;
        }

        .error {
            text-align: center;
            color: #e57373;
            padding: 2rem;
            background: rgba(244, 67, 54, 0.1);
            border-radius: 1rem;
            border: 1px solid #ffcdd2;
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: white;
            border-radius: 1.5rem;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            color: #333;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            transition: color 0.3s ease;
        }

        .close-btn:hover {
            color: #333;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: #333;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 0.5rem;
            font-size: 1rem;
            font-family: inherit;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #4caf50;
        }

        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }

        .submit-btn {
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 1rem;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .submit-btn:hover:not(:disabled) {
            background: linear-gradient(135deg, #388e3c, #689f38);
            transform: translateY(-2px);
        }

        .submit-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-container {
                padding: 1.5rem;
            }
            
            .modal {
                padding: 1.5rem;
                width: 95%;
            }
            
            .message-card {
                padding: 1.5rem;
            }
            
            .message-header {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-start;
            }
            
            .message-author {
                font-size: 1.1rem;
            }
            
            .message-content {
                font-size: 1rem;
                padding: 0.8rem;
            }
        }

        @media (max-width: 480px) {
            .header {
                flex-direction: column;
                gap: 1rem;
            }
            
            .btn-home {
                align-self: flex-start;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .main-container {
                padding: 1rem;
            }
            
            .message-card {
                padding: 1.2rem;
            }
            
            .message-content {
                font-size: 0.95rem;
                padding: 0.6rem;
            }
            
            .message-content::before,
            .message-content::after {
                font-size: 2rem;
            }
        }

        .no-messages {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 3rem 1rem;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 1rem;
            border: 2px dashed #ddd;
        }

        .no-messages i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
            display: block;
        }

        .success-message {
            background: #e8f5e9;
            color: #388e3c;
            border: 1px solid #c8e6c9;
            border-radius: 1rem;
            padding: 1rem 2rem;
            margin: 1rem auto;
            text-align: center;
            font-size: 1.15rem;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(56, 142, 60, 0.08);
            max-width: 400px;
            transition: opacity 0.3s;
            z-index: 100;
        }

        .success-message-toast {
  position: fixed;
  top: 24px;
  right: 32px;
  background: #a5d6a7;
  color: #1b5e20;
  border: 1px solid #388e3c;
  border-radius: 1rem;
  padding: 1rem 2.5rem 1rem 1.5rem;
  text-align: left;
  font-size: 1.15rem;
  font-weight: 600;
  box-shadow: 0 2px 16px rgba(56, 142, 60, 0.12);
  z-index: 9999;
  display: flex;
  align-items: center;
  gap: 1rem;
  opacity: 1;
  transition: opacity 0.3s;
}
.success-icon {
  font-size: 1.5rem;
  margin-right: 0.5rem;
}
.error-message-toast {
  position: fixed;
  top: 24px;
  right: 32px;
  background: #ffcdd2;
  color: #b71c1c;
  border: 1px solid #e53935;
  border-radius: 1rem;
  padding: 1rem 2.5rem 1rem 1.5rem;
  text-align: left;
  font-size: 1.15rem;
  font-weight: 600;
  box-shadow: 0 2px 16px rgba(229, 57, 53, 0.12);
  z-index: 9999;
  display: flex;
  align-items: center;
  gap: 1rem;
  opacity: 1;
  transition: opacity 0.3s;
}
.error-icon {
  font-size: 1.5rem;
  margin-right: 0.5rem;
}

        .pastel-blue { background: linear-gradient(135deg, #e3f2fd 0%, #b3e5fc 100%); border: 2px solid #81d4fa; }
.pastel-green { background: linear-gradient(135deg, #c8e6c9 0%, #66bb6a 100%); border: 2px solid #388e3c; }
.pastel-pink { background: linear-gradient(135deg, #fce4ec 0%, #f8bbd0 100%); border: 2px solid #f06292; }
.pastel-yellow { background: linear-gradient(135deg, #fff9c4 0%, #ffe082 100%); border: 2px solid #ffd54f; }
.pastel-lilac { background: linear-gradient(135deg, #d1c4e9 0%, #9575cd 100%); border: 2px solid #7e57c2; }
.pastel-red { background: linear-gradient(135deg, #ffcdd2 0%, #e57373 100%); border: 2px solid #e53935; }
    </style>
</head>
<body>
    <div class="header">
        <a href={createUrl("/")} class="btn-back">
            <i class="fa-solid fa-arrow-left"></i>
            Home
        </a>
    </div>
    <h1 class="main-title"><span class="rainbow-text">Scatola del Tempo per Leone</span></h1>

    <div class="main-container">
        <div class="intro-text">
            <p>Benvenuto nella Scatola del Tempo di Leone!</p>
            <p>Qui puoi lasciare un messaggio speciale che Leone potrà leggere quando sarà più grande.</p>
            <p>Condividi i tuoi auguri, consigli, ricordi o semplicemente un pensiero d'amore! 💕</p>
        </div>

        <button class="add-message-btn" id="addMessageBtn">
            <i class="fa-solid fa-plus"></i>
            Aggiungi un messaggio
        </button>

        <div id="messagesContainer" class="messages-container">
            <div class="loading">
                <i class="fa-solid fa-spinner fa-spin"></i>
                Caricamento messaggi...
            </div>
        </div>

        <div id="successMessage" class="success-message-toast" style="display:none;">
  <span class="success-icon">✔️</span> Messaggio inviato con successo!
</div>
    </div>

    <!-- Modal per aggiungere messaggio -->
    <div class="modal-overlay" id="modalOverlay">
        <div class="modal">
            <button class="close-btn" id="closeBtn">&times;</button>
            <div class="modal-header">
                <h2 class="modal-title">✨ Aggiungi un messaggio per Leone ✨</h2>
                <p>Il tuo messaggio sarà conservato per sempre nella sua scatola del tempo!</p>
            </div>
            <form id="messageForm">
                <div class="form-group">
                    <label for="authorName">Il tuo nome:</label>
                    <input type="text" id="authorName" name="authorName" required maxlength="50" 
                           placeholder="Come ti chiami?">
                </div>
                <div class="form-group">
                    <label for="messageContent">Il tuo messaggio per Leone:</label>
                    <textarea id="messageContent" name="messageContent" required maxlength="1000" 
                              placeholder="Scrivi qui il tuo messaggio speciale per Leone..."></textarea>
                </div>
                <button type="submit" class="submit-btn" id="submitBtn">
                    <i class="fa-solid fa-paper-plane"></i>
                    Invia messaggio
                </button>
            </form>
        </div>
    </div>

    <script>
        class ScatolaTempo {
            constructor() {
                // GitHub configuration
                this.GITHUB_TOKEN = 'WjJsMGFIVmlYM0JoZEY4eE1VRktWMVJhV0ZFd01HdHlkVTlSZGpOUlozRklYMVZuVDBObFdYVkVVMlo2ZEVsb1FtVkdNMjQ1ZDFab2RWSnBVbEZRVEZwVmRFMDJUR0p3ZEZneFRVRkxTVFJOVDFoQk5IcEhUa28wZGxkMg==';
                this.REPO_OWNER = 'KeyserDSoze';
                this.REPO_NAME = 'leone';
                this.LABEL = 'capsula';
                
                this.apiBase = `https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}`;
                
                this.initializeElements();
                this.setupEventListeners();
                this.ensureLabelExists();
                this.loadMessages();
            }
            
            // Funzione per decodificare il token GitHub (doppia decodifica Base64)
            decodeToken() {
                try {
                    const firstDecode = atob(this.GITHUB_TOKEN);
                    const secondDecode = atob(firstDecode);
                    return secondDecode;
                } catch (error) {
                    console.error('Errore nella decodifica del token:', error);
                    return 'INSERISCI_QUI_IL_TUO_TOKEN';
                }
            }
            
            initializeElements() {
                this.addMessageBtn = document.getElementById('addMessageBtn');
                this.modalOverlay = document.getElementById('modalOverlay');
                this.closeBtn = document.getElementById('closeBtn');
                this.messageForm = document.getElementById('messageForm');
                this.messagesContainer = document.getElementById('messagesContainer');
                this.submitBtn = document.getElementById('submitBtn');
            }
            
            setupEventListeners() {
                this.addMessageBtn.addEventListener('click', () => this.openModal());
                this.closeBtn.addEventListener('click', () => this.closeModal());
                this.modalOverlay.addEventListener('click', (e) => {
                    if (e.target === this.modalOverlay) {
                        this.closeModal();
                    }
                });
                
                // Chiudi con ESC
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.modalOverlay.classList.contains('show')) {
                        this.closeModal();
                    }
                });
                
                this.messageForm.addEventListener('submit', (e) => this.handleSubmit(e));
            }
            
            openModal() {
                this.modalOverlay.classList.add('show');
                document.getElementById('authorName').focus();
            }
            
            closeModal() {
                this.modalOverlay.classList.remove('show');
                this.messageForm.reset();
                this.submitBtn.disabled = false;
                this.submitBtn.innerHTML = '<i class="fa-solid fa-paper-plane"></i> Invia messaggio';
            }
            
            async ensureLabelExists() {
                try {
                    const decodedToken = this.decodeToken();
                    
                    // Controlla se il label esiste già
                    const response = await fetch(`${this.apiBase}/labels/${this.LABEL}`, {
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });
                    
                    if (response.status === 404) {
                        // Il label non esiste, crealo
                        console.log(`Label "${this.LABEL}" non trovato, lo creo...`);
                        
                        const createResponse = await fetch(`${this.apiBase}/labels`, {
                            method: 'POST',
                            headers: {
                                'Authorization': `token ${decodedToken}`,
                                'Accept': 'application/vnd.github.v3+json',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: this.LABEL,
                                description: 'Messaggi per la capsula del tempo di Leone',
                                color: '8B5CF6' // Viola
                            })
                        });
                        
                        if (createResponse.ok) {
                            console.log(`Label "${this.LABEL}" creato con successo!`);
                        } else {
                            console.warn('Impossibile creare il label, ma continuo comunque');
                        }
                    } else if (response.ok) {
                        console.log(`Label "${this.LABEL}" già esistente`);
                    }
                } catch (error) {
                    console.warn('Errore nel controllo/creazione label:', error);
                }
            }
            
            async loadMessages() {
                try {
                    console.log('Caricamento messaggi...');
                    
                    const decodedToken = this.decodeToken();
                    
                    if (decodedToken === 'INSERISCI_QUI_IL_TUO_TOKEN') {
                        throw new Error('Token GitHub non configurato');
                    }
                    
                    // Aggiungi timestamp per evitare cache del browser
                    const timestamp = new Date().getTime();
                    const apiUrl = `${this.apiBase}/issues?state=open&sort=created&direction=desc&_t=${timestamp}`;
                    
                    console.log('URL API:', apiUrl);
                    
                    const response = await fetch(apiUrl, {
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });
                    
                    console.log('Risposta API:', response.status, response.statusText);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Errore API dettagliato:', errorText);
                        throw new Error(`Errore GitHub API: ${response.status} - ${errorText}`);
                    }
                    
                    const allIssues = await response.json();
                    console.log(`Trovate ${allIssues.length} Issues totali:`, allIssues);
                    
                    // Filtra Issues che hanno il nostro label
                    const filteredIssues = allIssues.filter(issue => 
                        issue.labels.some(label => label.name === this.LABEL)
                    );
                    
                    console.log(`Trovati ${filteredIssues.length} messaggi con label '${this.LABEL}':`, filteredIssues);
                    
                    this.renderMessages(filteredIssues);
                    
                } catch (error) {
                    console.error('Errore nel caricamento:', error);
                    this.showError(`Errore nel caricamento: ${error.message}`);
                }
            }
            
            renderMessages(issues) {
                if (issues.length === 0) {
                    // Messaggio di default con la stessa grafica degli altri messaggi
                    const defaultColors = { bg: '#ffeaa7', border: '#fdcb6e', accent: '#e17055' };
                    
                    this.messagesContainer.innerHTML = `
                        <div class="message-card" style="
                            background: ${defaultColors.bg};
                            border: 2px solid ${defaultColors.border};
                            border-radius: 1rem;
                            padding: 1.5rem;
                            margin-bottom: 1.5rem;
                            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                            transition: all 0.3s ease;
                            text-align: center;
                        ">
                            
                            <div class="message-header" style="
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                margin-bottom: 1rem;
                                padding-bottom: 0.8rem;
                                border-bottom: 1px solid ${defaultColors.border};
                            ">
                                <div class="message-author" style="
                                    font-weight: 600;
                                    font-size: 1.2rem;
                                    display: flex;
                                    align-items: center;
                                    gap: 0.5rem;
                                ">
                                    Scatola del Tempo di Leone
                                </div>
                            </div>
                            
                            <div class="message-content" style="
                                color: #4b5563;
                                line-height: 1.6;
                                font-size: 1rem;
                                background: rgba(255, 255, 255, 0.6);
                                padding: 1rem;
                                border-radius: 0.8rem;
                                border-left: 3px solid ${defaultColors.accent};
                            ">
                                Ancora nessun messaggio nella scatola del tempo di Leone.<br>
                                Sii tu il primo a lasciare un messaggio speciale! 💕
                            </div>
                        </div>
                    `;
                    return;
                }
                
                const messagesHTML = issues.map((issue, i) => {
                    const date = new Date(issue.created_at).toLocaleDateString('it-IT', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    
                    // Estrai il nome dall'autore dal titolo "Messaggio da [nome]"
                    const authorMatch = issue.title.match(/Messaggio da (.+)/);
                    const author = authorMatch ? authorMatch[1] : 'Anonimo';
                    
                    // Colori pastello rotativi per varietà - 10 varianti
                    const pastelColors = [
                        { bg: '#fff0f3', border: '#ffc9d0', accent: '#ff9eb5' }, // Rosa pastello
                        { bg: '#f0f8ff', border: '#c9e2ff', accent: '#9ec8ff' }, // Azzurro pastello
                        { bg: '#f0fff0', border: '#c9ffc9', accent: '#9eff9e' }, // Verde pastello
                        { bg: '#fff8f0', border: '#ffe2c9', accent: '#ffc89e' }, // Arancione pastello
                        { bg: '#f8f0ff', border: '#e2c9ff', accent: '#c89eff' }, // Viola pastello
                        { bg: '#fff5f0', border: '#ffd4c9', accent: '#ffb39e' }, // Pesca pastello
                        { bg: '#f0ffff', border: '#c9ffff', accent: '#9effff' }, // Ciano pastello
                        { bg: '#fff0f8', border: '#ffc9e2', accent: '#ff9ec8' }, // Fucsia pastello
                        { bg: '#f8fff0', border: '#e2ffc9', accent: '#c8ff9e' }, // Lime pastello
                        { bg: '#f5f0ff', border: '#d4c9ff', accent: '#b39eff' }  // Lavanda pastello
                    ];
                    
                    // Assegna colore basato su una combinazione di nome utente e timestamp per varietà
                    const nameHash = author.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
                    const dateHash = new Date(issue.created_at).getTime();
                    const colorIndex = (nameHash + Math.floor(dateHash / 1000000)) % pastelColors.length;
                    const colors = pastelColors[colorIndex];
                    
                    return `
                        <div class="message-card " + getPastelClass(i) + " style="
                            background: ${colors.bg};
                            border: 2px solid ${colors.border};
                            border-radius: 1rem;
                            padding: 1.5rem;
                            margin-bottom: 1.5rem;
                            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                            transition: all 0.3s ease;
                        " onmouseover="this.style.transform='translateY(-3px)'; this.style.boxShadow='0 8px 20px rgba(0, 0, 0, 0.12)';" 
                           onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(0, 0, 0, 0.08)';">
                            
                            <div class="message-header" style="
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                margin-bottom: 1rem;
                                padding-bottom: 0.8rem;
                                border-bottom: 1px solid ${colors.border};
                            ">
                                <div class="message-author" style="
                                    font-weight: 600;
                                    font-size: 1.1rem;
                                    color: #374151;
                                    display: flex;
                                    align-items: center;
                                    gap: 0.5rem;
                                ">
                                    ${this.escapeHtml(author)}
                                </div>
                                <div class="message-date" style="
                                    background: #ffffff;
                                    color: ${colors.accent};
                                    padding: 0.4rem 1rem;
                                    border-radius: 1rem;
                                    font-size: 0.85rem;
                                    font-weight: 600;
                                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
                                    border: 2px solid ${colors.accent};
                                ">${date}</div>
                            </div>
                            
                            <div class="message-content" style="
                                color: #4b5563;
                                line-height: 1.6;
                                font-size: 1rem;
                                background: rgba(255, 255, 255, 0.6);
                                padding: 1rem;
                                border-radius: 0.8rem;
                                border-left: 3px solid ${colors.accent};
                                white-space: pre-wrap;
                            ">${this.escapeHtml(issue.body)}</div>
                        </div>
                    `;
                }).join('');
                
                this.messagesContainer.innerHTML = messagesHTML;
            }
            
            showError(message) {
                this.messagesContainer.innerHTML = `
                    <div class="error">
                        <i class="fa-solid fa-exclamation-triangle"></i>
                        <p>${message}</p>
                    </div>
                `;
            }
            
            async handleSubmit(e) {
                e.preventDefault();
                
                const authorName = document.getElementById('authorName').value.trim();
                const messageContent = document.getElementById('messageContent').value.trim();
                
                if (!authorName || !messageContent) {
                    alert('Per favore, compila tutti i campi!');
                    return;
                }
                
                // Disabilita il pulsante e mostra loading
                this.submitBtn.disabled = true;
                this.submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Invio in corso...';
                
                try {
                    const decodedToken = this.decodeToken();
                    
                    const response = await fetch(`${this.apiBase}/issues`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            title: `Messaggio da ${authorName}`,
                            body: messageContent,
                            labels: [this.LABEL]
                        })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`Errore GitHub API: ${response.status} - ${errorData.message || 'Errore sconosciuto'}`);
                    }
                    
                    const newIssue = await response.json();
                    console.log('Messaggio inviato con successo!', newIssue);
                    
                    // Chiudi la modale
                    this.closeModal();
                    
                    // Mostra conferma
                    this.showSuccessMessage();
                    
                    // Aspetta un momento e poi ricarica i messaggi
                    setTimeout(() => {
                        console.log('Ricaricamento messaggi dopo invio...');
                        
                        // Mostra un loading temporaneo
                        this.messagesContainer.innerHTML = `
                            <div class="loading" style="text-align: center; padding: 2rem; color: #666;">
                                <i class="fa-solid fa-spinner fa-spin"></i>
                                Aggiornamento messaggi...
                            </div>
                        `;
                        
                        this.loadMessages();
                    }, 2000);
                    
                } catch (error) {
                    console.error('Errore nell\'invio:', error);
                    alert(`Errore nell'invio del messaggio: ${error.message}`);
                    
                    // Riabilita il pulsante
                    this.submitBtn.disabled = false;
                    this.submitBtn.innerHTML = '<i class="fa-solid fa-paper-plane"></i> Invia messaggio';
                }
            }
            
            showSuccessMessage() {
                const msg = document.getElementById('successMessage');
                if (msg) {
                    msg.style.display = 'flex';
                    msg.style.opacity = '1';
                    setTimeout(() => {
                        msg.style.opacity = '0';
                        setTimeout(() => { msg.style.display = 'none'; }, 400);
                    }, 6000);
                }
            }
            
            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        }
        
        // Alterna le classi pastello sulle card
        function getPastelClass(index) {
          const classes = ['pastel-blue', 'pastel-green', 'pastel-pink', 'pastel-yellow', 'pastel-lilac', 'pastel-red'];
          return classes[index % classes.length];
        }
        
        // Avvia l'applicazione
        console.log('Caricamento Scatola del Tempo...');
        document.addEventListener('DOMContentLoaded', () => {
            new ScatolaTempo();
        });
    </script>
</body>
</html>
