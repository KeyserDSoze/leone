
---
import { getCollection } from 'astro:content';
import { createUrl, createAssetUrl } from '../utils/urls';
const lista = await getCollection('lista-nascita');
---

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
</head>

<div class="header">
  <a href={createUrl('/')} class="btn-home">
    <i class="fa-solid fa-home"></i>
    Home
  </a>
</div>

<h1 class="main-title">ü¶Å <span class="rainbow-text">Lista Nascita di Leone</span> ü¶Å</h1>

<!-- Controlli di filtro e ordinamento -->
<div class="controls">
  <div class="filters">
    <div class="sort-section">
      <label>Ordina per (di default per priorit&agrave;):</label>
      <div class="sort-options">
        <label class="checkbox-label">
          <input type="checkbox" id="sort-prezzo" value="prezzo" />
          <span class="checkmark"></span>
          Prezzo (crescente)
        </label>
        <label class="checkbox-label">
          <input type="checkbox" id="sort-prezzo-desc" value="prezzo-desc" />
          <span class="checkmark"></span>
          Prezzo (decrescente)
        </label>
        <label class="checkbox-label">
          <input type="checkbox" id="sort-nome" value="nome" />
          <span class="checkmark"></span>
          Nome
        </label>
      </div>
    </div>
    
    <div class="filter-row">
      <div class="filter-section">
        <label for="negozio-filter">Filtra per negozio:</label>
        <select id="negozio-filter">
          <option value="">Tutti i negozi</option>
          <option value="Amazon">Amazon</option>
          <option value="Mondo Bimbo">Mondo Bimbo</option>
        </select>
      </div>
      
      <div class="filter-section">
        <label for="stato-filter">Filtra per stato:</label>
        <select id="stato-filter">
          <option value="tutti">Tutti gli oggetti</option>
          <option value="da-regalare">Regalabili</option>
          <option value="regalati">Regalati</option>
        </select>
      </div>
    </div>
  </div>
</div>
 

<section class="grid" id="items-grid">
  <!-- Gli item verranno generati dinamicamente da JavaScript -->
</section>

<!-- Overlay modale completamente fuori dall'alberatura -->
<div id="global-modal-overlay" class="modal-overlay">
  <img id="modal-image" src="" alt="" class="modal-image" />
</div>

<style is:global>
  body {
    background: url('../images/background.png') center center/cover no-repeat fixed;
    min-height: 100vh;
    font-family: system-ui, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji";
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    margin: 0;
    position: relative;
  }
  
  /* Overlay per migliorare la leggibilit√† */
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.85);
    z-index: -1;
    pointer-events: none;
  }
  
  .header {
    position: relative;
    z-index: 10;
    padding: 1rem 2rem;
    text-align: left;
    margin-bottom: 1rem;
  }
  
  @media only screen and (max-width: 480px) {
    .header {
      flex-direction: column;
      gap: 1rem;
    }
    
    .btn-home {
      align-self: flex-start;
    }
  }
  
  .btn-home {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.5rem;
    background: linear-gradient(135deg, #388e3c, #4caf50);
    color: white;
    text-decoration: none;
    border-radius: 1rem;
    font-weight: bold;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(56, 142, 60, 0.3);
  }
  
  .btn-home:hover {
    background: linear-gradient(135deg, #2e7d32, #388e3c);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(56, 142, 60, 0.4);
  }
  
  .btn-home i {
    font-size: 1.1rem;
  }
  
  .main-title {
    text-align: center;
    font-size: 3.5rem;
    font-weight: bold;
    margin: 1rem 0 2rem 0;
    color: #333;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    letter-spacing: 2px;
    position: relative;
    z-index: 10;
  }
  
  .rainbow-text {
    background: linear-gradient(45deg, 
      #ff0000, #ff8c00, #ffd700, #32cd32, 
      #1e90ff, #8a2be2, #ff1493, #ff0000);
    background-size: 400% 400%;
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: rainbow-flow 3s ease-in-out infinite;
  }
  
  @keyframes rainbow-flow {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  /* Responsive per il titolo */
  @media (max-width: 768px) {
    .main-title {
      font-size: 2.0rem;
      margin: 1rem 0 1.5rem 0;
      letter-spacing: 1px;
    }
  }
  
  @media (max-width: 480px) {
    .main-title {
      font-size: 1.3rem;
      margin: 0.5rem 0 1rem 0;
      letter-spacing: 0.5px;
    }
  }
  
  /* Controlli di filtro e ordinamento */
  .controls {
    max-width: 900px;
    margin: 1rem auto;
    padding: 0 1rem;
    width: 100%;
  }
  
  .filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.9);
    padding: 1rem;
    border-radius: 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  .filters label {
    font-weight: bold;
    color: #2e7d32;
    margin-right: 0.5rem;
  }
  
  .filters select {
    padding: 0.5rem;
    border: 2px solid #4caf50;
    border-radius: 0.5rem;
    background: white;
    color: #2e7d32;
    font-size: 1rem;
    cursor: pointer;
    transition: border-color 0.3s ease;
  }
  
  .filters select:hover, .filters select:focus {
    border-color: #388e3c;
    outline: none;
  }

  /* MOBILE: Riorganizziamo completamente i filtri */
  @media (max-width: 768px) {
    .controls {
      margin: 0.5rem auto !important;
      padding: 0 0.5rem !important;
    }
    
    .filters {
      flex-direction: column !important;
      gap: 1rem !important;
      padding: 0.8rem !important;
    }
    
    .filters > div {
      width: 100% !important;
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
      gap: 0.5rem !important;
    }
    
    .filters label {
      font-size: 0.9rem !important;
      margin-right: 0 !important;
    }
    
    .filters select {
      width: 100% !important;
      max-width: 250px !important;
      font-size: 0.9rem !important;
      padding: 0.7rem !important;
    }
  }
  
  /* MOBILE PICCOLO: Ultra-semplificato */
  @media (max-width: 480px) {
    .controls {
      margin: 0.3rem auto !important;
      padding: 0 0.3rem !important;
    }
    
    .filters {
      padding: 0.5rem !important;
      gap: 0.8rem !important;
    }
    
    .filters label {
      font-size: 0.8rem !important;
      text-align: center !important;
    }
    
    .filters select {
      font-size: 0.8rem !important;
      padding: 0.5rem !important;
      max-width: 200px !important;
    }
  }
  
  /* Sezioni di filtro */
  .sort-section, .filter-section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
  }
  
  .filter-row {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e0e0e0;
    width: 100%;
  }

  /* MOBILE: Riorganizziamo i filtri */
  @media (max-width: 768px) {
    .filter-row {
      flex-direction: column !important;
      gap: 1rem !important;
      align-items: center !important;
      margin-top: 0.5rem !important;
      padding-top: 0.5rem !important;
    }
    
    .sort-section, .filter-section {
      width: 100% !important;
      align-items: center !important;
    }
  }
  
  @media (max-width: 480px) {
    .filter-row {
      gap: 0.8rem !important;
      margin-top: 0.3rem !important;
      padding-top: 0.3rem !important;
    }
  }
  
  .sort-options {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    justify-content: center;
  }
  
  /* MOBILE: Checkbox pi√π grandi e leggibili */
  @media (max-width: 768px) {
    .sort-options {
      gap: 0.5rem !important;
      justify-content: center !important;
      width: 100% !important;
    }
  }
  
  @media (max-width: 480px) {
    .sort-options {
      gap: 0.3rem !important;
      flex-direction: column !important;
      align-items: center !important;
    }
  }
  
  /* Checkbox personalizzate */
  .checkbox-label {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 0.9rem;
    color: #2e7d32;
    font-weight: normal !important;
    margin-right: 0 !important;
    padding: 0.3rem 0.6rem;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid #e0e0e0;
    transition: all 0.3s ease;
  }
  
  .checkbox-label:hover {
    background: rgba(76, 175, 80, 0.1);
    border-color: #4caf50;
  }
  
  /* MOBILE: Checkbox pi√π grandi e leggibili */
  @media (max-width: 768px) {
    .checkbox-label {
      font-size: 0.85rem !important;
      padding: 0.5rem 0.8rem !important;
      width: auto !important;
      min-width: 180px !important;
      justify-content: center !important;
    }
  }
  
  @media (max-width: 480px) {
    .checkbox-label {
      font-size: 0.8rem !important;
      padding: 0.6rem 1rem !important;
      min-width: 200px !important;
      width: 90% !important;
      max-width: 250px !important;
    }
  }
  
  .checkbox-label input[type="checkbox"] {
    display: none;
  }
  
  .checkmark {
    width: 16px;
    height: 16px;
    border: 2px solid #4caf50;
    border-radius: 3px;
    margin-right: 0.5rem;
    position: relative;
    transition: all 0.3s ease;
  }
  
  .checkbox-label input[type="checkbox"]:checked + .checkmark {
    background: #4caf50;
    border-color: #4caf50;
  }
  
  .checkbox-label input[type="checkbox"]:checked + .checkmark:after {
    content: "‚úì";
    position: absolute;
    top: -2px;
    left: 2px;
    color: white;
    font-size: 12px;
    font-weight: bold;
  }
  
  .checkbox-label input[type="checkbox"]:checked + .checkmark + span {
    font-weight: bold;
  }
  
  .grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
    margin: 2rem auto;
    max-width: 900px;
    justify-items: center;
    width: 100%;
  }
  
  .item {
    background: rgba(255, 255, 255, 0.95);
    border: 2px solid #388e3c;
    border-radius: 1.2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(10px);
    padding: 1.2rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    position: relative;
    min-height: 120px;
    margin-bottom: 0.5rem;
    min-width: 100%;
  }
  
  /* Tablet e Mobile: forza una singola colonna */
  @media only screen and (max-width: 768px) {
    .grid {
      display: grid !important;
      grid-template-columns: 1fr !important;
      gap: 1.5rem !important;
      margin: 1rem !important;
      max-width: none !important;
      width: calc(100% - 2rem) !important;
    }
    
    .item {
      max-width: 100% !important;
      width: 100% !important;
    }
  }
  
  /* Mobile specifico: layout ultra-ottimizzato */
  @media only screen and (max-width: 480px) {
    .grid {
      display: grid !important;
      grid-template-columns: 1fr !important;
      gap: 1rem !important;
      margin: 0.5rem !important;
      width: calc(100% - 1rem) !important;
      padding: 0 !important;
    }
    
    .item {
      max-width: 100% !important;
      width: 100% !important;
      padding: 1rem !important;
      margin-bottom: 0.5rem !important;
    }
  }

  .row {
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
    gap: 1.5rem;
  }
  
  /* Responsive per il layout delle immagini su mobile */
  @media only screen and (max-width: 480px) {
    .row {
      gap: 1rem;
    }
  }
  
  .item .icona {
    height: auto;
    width: 120px;
    max-width: 120px;
    margin: 0 0.5rem 0 0;
    object-fit: contain;
    flex-shrink: 0;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  /* Su mobile, riduciamo le dimensioni delle immagini */
  @media only screen and (max-width: 480px) {
    .item .icona {
      width: 80px;
      max-width: 80px;
      margin: 0 0.3rem 0 0;
    }
  }
  
  .item .icona:hover {
    transform: scale(1.05);
  }
  
  .image-container {
    position: relative;
    display: inline-block;
  }
  
  .no-image {
    height: 120px;
    width: 120px;
    margin: 0 0.5rem 0 0;
    background: #f5f5f5;
    border: 2px dashed #ccc;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  
  /* Su mobile, riduciamo anche il placeholder delle immagini */
  @media only screen and (max-width: 480px) {
    .no-image {
      height: 80px;
      width: 80px;
      margin: 0 0.3rem 0 0;
    }
    
    .no-image i {
      font-size: 1.8rem;
    }
  }
  
  .no-image i {
    font-size: 2.5rem;
    color: #bbb;
  }
  
  .modal-overlay {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    background: rgba(0, 0, 0, 0.8) !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    z-index: 9999 !important;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    margin: 0 !important;
    padding: 0 !important;
  }
  
  .image-container:hover .modal-overlay {
    /* Non pi√π necessario - overlay gestito globalmente */
  }
  
  .modal-overlay.show {
    opacity: 1;
    visibility: visible;
  }
  
  .modal-image {
    max-width: 80vw;
    max-height: 80vh;
    object-fit: contain;
    border-radius: 1rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    opacity: 1 !important;
  }
  
  .item.acquistato .modal-overlay {
    /* Non pi√π necessario - overlay gestito globalmente */
  }
  
  .item.acquistato .image-container:hover .modal-overlay {
    /* Non pi√π necessario - overlay gestito globalmente */
  }
  
  .item.acquistato .modal-image {
    opacity: 1 !important;
  }
  .info {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    flex: 1;
    gap: 0.2rem;
    text-align: right;
  }
  
  /* Su mobile, miglioriamo il layout del testo */
  @media only screen and (max-width: 480px) {
    .info {
      gap: 0.1rem;
    }
  }
  
  .item .nome {
    font-size: 1.2rem;
    font-weight: bold;
    color: #388e3c;
    margin-bottom: 0.2rem;
    text-align: right;
    height: 4.3rem; /* Altezza fissa per 3 righe (1.2rem * 1.2 line-height * 3) */
    line-height: 1.2;
    overflow: hidden;
    display: flex;
    align-items: flex-start;
    justify-content: flex-end;
  }
  
  /* Su mobile, riduciamo la dimensione del nome e l'altezza */
  @media only screen and (max-width: 480px) {
    .item .nome {
      font-size: 1rem;
      height: 3.6rem; /* Riduciamo leggermente l'altezza */
      line-height: 1.1;
    }
  }
  .item .categoria {
    font-size: 1.0rem;
    color: #757575;
    margin-bottom: 0.5rem;
  }
  
  /* Su mobile, riduciamo la dimensione del testo */
  @media only screen and (max-width: 480px) {
    .item .categoria {
      font-size: 0.9rem;
      margin-bottom: 0.3rem;
    }
  }
  
  .item .negozio {
    font-size: 0.8rem;
    color: #00897b;
    margin-bottom: 0.5rem;
  }
  
  @media only screen and (max-width: 480px) {
    .item .negozio {
      font-size: 0.7rem;
      margin-bottom: 0.3rem;
    }
  }
  
  .item .prezzo {
    font-size: 1.2rem;
    color: #f9a825;
    margin-bottom: 0.5rem;
  }
  
  @media only screen and (max-width: 480px) {
    .item .prezzo {
      font-size: 1.1rem;
      margin-bottom: 0.3rem;
    }
  }
  
  .item .priorita {
    font-size: 0.9rem;
    color: #8e24aa;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  @media only screen and (max-width: 480px) {
    .item .priorita {
      font-size: 0.8rem;
      margin-bottom: 0.3rem;
    }
  }
  
  .item .status {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 1.4rem;
  }
  .item .check {
    color: #388e3c;
  }
  .item .present {
    color: #f06292;
  }
  .item.acquistato {
    opacity: 0.5;
  }
  .item .cart {
    color: #e57373;
  }
  .item .link {
    margin-top: 1rem;
    background: #ffb300;
    color: #fff;
    border-radius: 0.7rem;
    padding: 0.5rem 1.2rem;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background 0.2s;
    box-shadow: 0 2px 8px #ffd54f;
    cursor: pointer;
    align-self: flex-end;
  }
  
  /* Su mobile, riduciamo il pulsante e il padding */
  @media only screen and (max-width: 480px) {
    .item .link {
      margin-top: 0.5rem;
      padding: 0.4rem 1rem;
      font-size: 1rem;
      gap: 0.3rem;
    }
  }
  .item .link:hover {
    background: #388e3c;
  }
  .item .cart-btn {
    font-size: 1.2rem;
    margin-right: 0.2rem;
  }
</style>

<script define:vars={{ listaData: lista.map(item => ({
    ...item.data,
    id: item.id
  })) }}>
  
  document.addEventListener('DOMContentLoaded', function() {
    // Riferimenti all'overlay globale
    const globalOverlay = document.getElementById('global-modal-overlay');
    const modalImage = document.getElementById('modal-image');
    
    if (!globalOverlay || !modalImage) return;
    
    // Funzioni per gestire la lista
    let currentData = [...listaData];
    
    // Funzione per creare URL degli asset (client-side)
    function createAssetUrl(assetPath) {
      if (!assetPath) return '';
      
      // Determina il base path
      const hostname = window.location.hostname;
      const customDomains = ['leonerapiti.com', 'www.leonerapiti.com', 'leone.famiglia.it', 'www.leone.famiglia.it'];
      let basePath = '';
      
      if (hostname.includes('github.io')) {
        basePath = '/leone';
      } else if (!customDomains.includes(hostname)) {
        // Per sviluppo locale o altri domini
        basePath = '';
      }
      
      const cleanPath = assetPath.startsWith('/') ? assetPath : `/${assetPath}`;
      return `${basePath}${cleanPath}`;
    }
    
    function formatPrice(prezzo) {
      if (prezzo === undefined) return '';
      if (prezzo === 0) return '<span style="color: #f9a825; font-weight: bold;">Importo a scelta</span>';
      return `${prezzo.toFixed(2).replace('.', ',')} &euro;`;
    }
    
    function createItemHTML(item) {
      const prezzo = formatPrice(item.prezzo);
      
      // Logica per i link: se √® Mondo Bimbo, usa la pagina di istruzioni
      let linkFinale;
      let linkTarget = '_blank';
      
      if (item.negozio === 'Mondo Bimbo') {
        // Crea URL per la pagina di istruzioni Mondo Bimbo usando la stessa logica degli asset
        const hostname = window.location.hostname;
        const customDomains = ['leonerapiti.com', 'www.leonerapiti.com', 'leone.famiglia.it', 'www.leone.famiglia.it'];
        let basePath = '';
        
        if (hostname.includes('github.io')) {
          basePath = '/leone';
        } else if (!customDomains.includes(hostname)) {
          basePath = '';
        }
        
        linkFinale = `${basePath}/mondo-bimbo-guida`;
        linkTarget = '_self'; // Rimani nello stesso tab per le pagine interne
      } else {
        linkFinale = item.link && item.link.trim() !== '' ? item.link : 'https://amazon.it';
      }
      
      const imageUri = createAssetUrl(item.icona);
      return `
        <div class="item${item.acquistato ? ' acquistato' : ''}">
          <div class="row">
            <div class="image-container">
                <img 
                  src="${imageUri}" 
                  alt="${item.nome}" 
                  class="icona" 
                  data-image-src="${imageUri}" 
                  data-image-alt="${item.nome}"
                  onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                />
                <div class="no-image" style="display: none;">
                  <i class="fa-solid fa-camera-slash"></i>
                </div>
            </div>
            <div class="info">
              <div class="nome">${item.nome}</div>
              <div class="categoria">${item.categoria}</div>
              <div class="negozio">${item.negozio}</div>
              <div class="prezzo">${prezzo}</div>
              ${!item.acquistato ? `
                <a class="link" href="${linkFinale}" target="${linkTarget}">
                  <span class="cart-btn"><i class="fa-solid fa-gift"></i></span> Regala <i class="fa-solid fa-champagne-glasses"></i>
                </a>
              ` : `
                <span class="link disabled" style="pointer-events:none; opacity:0.7; background:#bdbdbd;">
                  <span class="cart-btn"><i class="fa-solid fa-gift"></i></span>
                  Regalato <i class="fa-solid fa-fireworks"></i>
                </span>
              `}
            </div>
          </div>
        </div>
      `;
    }
    
    function renderItems(data) {
      const grid = document.getElementById('items-grid');
      if (!grid) return;
      
      grid.innerHTML = data.map(item => createItemHTML(item)).join('');
      
      // Reattacca event listeners per le immagini
      attachImageEvents();
    }
    
    function sortData(data, sortCriteria) {
      if (!sortCriteria || sortCriteria.length === 0) return [...data];
      
      const sorted = [...data];
      
      return sorted.sort((a, b) => {
        for (const criterion of sortCriteria) {
          let comparison = 0;
          
          switch(criterion) {
            case 'nome':
              comparison = a.nome.localeCompare(b.nome);
              break;
            case 'prezzo':
              // Per i prezzi, considera 0 come "infinito" per metterli alla fine
              const prezzoA = a.prezzo === 0 ? Number.MAX_VALUE : (a.prezzo || 0);
              const prezzoB = b.prezzo === 0 ? Number.MAX_VALUE : (b.prezzo || 0);
              comparison = prezzoA - prezzoB;
              break;
            case 'prezzo-desc':
              // Per prezzo decrescente, considera 0 come valore pi√π alto
              const prezzoDscA = a.prezzo === 0 ? Number.MAX_VALUE : (a.prezzo || 0);
              const prezzoDscB = b.prezzo === 0 ? Number.MAX_VALUE : (b.prezzo || 0);
              comparison = prezzoDscB - prezzoDscA;
              break;
            case 'priorita':
              comparison = (a.priorita || 3) - (b.priorita || 3);
              break;
          }
          
          if (comparison !== 0) {
            return comparison;
          }
        }
        return 0;
      });
    }
    
    function getSelectedSortCriteria() {
      const checkboxes = document.querySelectorAll('.sort-options input[type="checkbox"]:checked');
      const selectedCriteria = Array.from(checkboxes).map(cb => cb.value);
      
      // Se non ci sono criteri selezionati, usa la priorit√† come default
      if (selectedCriteria.length === 0) {
        return ['priorita'];
      }
      
      return selectedCriteria;
    }
    
    function filterData(data, negozio, stato) {
      let filtered = data;
      
      // Filtro per negozio
      if (negozio) {
        filtered = filtered.filter(item => item.negozio === negozio);
      }
      
      // Filtro per stato (regalato/da regalare)
      if (stato && stato !== 'tutti') {
        if (stato === 'regalati') {
          filtered = filtered.filter(item => item.acquistato === true);
        } else if (stato === 'da-regalare') {
          filtered = filtered.filter(item => !item.acquistato);
        }
      }
      
      return filtered;
    }
    
    function updateDisplay() {
      const negozioSelect = document.getElementById('negozio-filter');
      const statoSelect = document.getElementById('stato-filter');
      
      if (!negozioSelect || !statoSelect) return;
      
      let filtered = filterData(listaData, negozioSelect.value, statoSelect.value);
      let sortCriteria = getSelectedSortCriteria();
      let sorted = sortData(filtered, sortCriteria);
      
      currentData = sorted;
      renderItems(currentData);
    }
    
    // Event listeners per i controlli
    const checkboxes = document.querySelectorAll('.sort-options input[type="checkbox"]');
    const negozioSelect = document.getElementById('negozio-filter');
    const statoSelect = document.getElementById('stato-filter');
    
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateDisplay);
    });
    
    if (negozioSelect) {
      negozioSelect.addEventListener('change', updateDisplay);
    }
    
    if (statoSelect) {
      statoSelect.addEventListener('change', updateDisplay);
    }
    
    // Render iniziale
    updateDisplay();
    
    function attachImageEvents() {
      // Gestione click per aprire la modale
      const imageContainers = document.querySelectorAll('.image-container');
      
      imageContainers.forEach(container => {
        const icona = container.querySelector('.icona');
        
        // Click sull'immagine per aprire la modale (solo se c'√® un'immagine reale)
        icona?.addEventListener('click', function(e) {
          e.stopPropagation();
          
          // Imposta l'immagine nella modale
          const imageSrc = icona.getAttribute('data-image-src');
          const imageAlt = icona.getAttribute('data-image-alt');
          
          if (imageSrc) {
            modalImage.src = imageSrc;
            modalImage.alt = imageAlt || '';
            
            // Mostra l'overlay
            globalOverlay.classList.add('show');
          }
        });
      });
    }
    
    // Click per chiudere la modale
    globalOverlay.addEventListener('click', function(e) {
      if (e.target === globalOverlay || e.target === modalImage) {
        globalOverlay.classList.remove('show');
      }
    });
    
    // Chiudi con ESC
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        globalOverlay.classList.remove('show');
      }
    });
  });
</script>
