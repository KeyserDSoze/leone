---
// Forza 4 con Leone - AI imbattibile
import { createUrl, createAssetUrl } from '../utils/urls';

// Calcola l'URL del favicon
const faviconUrl = createAssetUrl('/favicon.svg');
---

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forza 4 con Leone</title>
    <link rel="icon" type="image/svg+xml" href={faviconUrl}>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
    <link rel="stylesheet" href="/global.css" />
    <style>
        /* Overlay per migliorare la leggibilità */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.85);
            z-index: -1;
            pointer-events: none;
        }
        
        /* Statistics Panel */
        .stats-panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 600px;
            width: 100%;
            margin: 0 auto 1.5rem auto;
        }

        .stats-title {
            color: #333;
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .stat-item {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 0.8rem;
            padding: 1rem 0.5rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .stat-item.wins {
            background: linear-gradient(135deg, #c8e6c9, #a5d6a7);
            color: #2e7d32;
        }

        .stat-item.losses {
            background: linear-gradient(135deg, #ffcdd2, #f8bbd0);
            color: #c62828;
        }

        .stat-item.draws {
            background: linear-gradient(135deg, #fff3e0, #ffe0b2);
            color: #ef6c00;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stats-loading {
            color: #666;
            font-style: italic;
            padding: 1rem;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            max-width: 600px;
            width: 100%;
            margin: 0rem auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .player-selection {
            text-align: center;
            margin-bottom: 2rem;
        }

        .player-selection h3 {
            color: #333;
            margin-bottom: 1rem;
        }

        .color-options {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .color-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 3px solid #333;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .color-btn:hover {
            transform: scale(1.1);
        }

        .color-btn.selected {
            border-width: 5px;
            transform: scale(1.2);
        }

        .color-btn.selected::after {
            content: "✓";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .start-btn {
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 2rem;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .start-btn:hover {
            background: linear-gradient(135deg, #388e3c, #689f38);
            transform: translateY(-2px);
        }

        .start-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .game-board {
            display: none;
        }

        .game-board.active {
            display: block;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 1rem;
        }

        .player-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .player-token {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #333;
        }

        .leone-token {
            background: #fff8dc;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #d4af37;
            font-weight: bold;
            border: 2px solid #d4af37;
            font-size: 28px;
        }

        .current-turn {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
        }

        .board {
            background: #1976d2;
            border-radius: 1rem;
            padding: 1rem;
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-template-rows: repeat(6, 1fr);
            gap: 0.5rem;
            margin-bottom: 1rem;
            min-height: 300px;
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
        }

        .cell {
            aspect-ratio: 1;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            border: 2px solid #0d47a1;
        }

        .cell:hover {
            background: #f0f0f0;
        }

        .cell.occupied {
            cursor: not-allowed;
        }

        .cell.occupied:hover {
            background: white;
        }

        .token {
            width: 80%;
            height: 80%;
            border-radius: 50%;
            border: 2px solid rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }

        .game-status {
            text-align: center;
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 1rem;
            min-height: 2rem;
        }

        .reset-btn {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 1.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .reset-btn:hover {
            background: linear-gradient(135deg, #e55a2b, #ff6b35);
            transform: translateY(-2px);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .game-container {
                padding: 1rem;
            }
            
            .color-btn {
                width: 40px;
                height: 40px;
            }
            
            .board {
                gap: 0.3rem;
                padding: 0.8rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 0.8rem;
            }

            .stat-number {
                font-size: 1.5rem;
            }
        }

    </style>
</head>
<body>
    <div class="header">
        <a href={createUrl("/")} class="btn-back">
            <i class="fa-solid fa-arrow-left"></i>
            Home
        </a>
    </div>

    <h1 class="main-title"><span class="rainbow-text">Forza 4 con Leone</span></h1>

    <!-- Pannello Statistiche -->
    <div class="stats-panel" id="statsPanel">
        <div class="stats-title">
            <i class="fa-solid fa-chart-bar"></i>
            Statistiche di Leone
        </div>
        <div id="statsContent" class="stats-loading">
            <i class="fa-solid fa-spinner fa-spin"></i>
            Caricamento statistiche...
        </div>
    </div>

    <div class="game-container">
        <!-- Selezione colore giocatore -->
        <div class="player-selection" id="playerSelection">
            <h3>Scegli il tuo colore:</h3>
            <div class="color-options">
                <div class="color-btn" data-color="#ff0000" style="background: #ff0000;" title="Rosso"></div>
                <div class="color-btn" data-color="#ff8c00" style="background: #ff8c00;" title="Arancione"></div>
                <div class="color-btn" data-color="#ffd700" style="background: #ffd700;" title="Giallo"></div>
                <div class="color-btn" data-color="#32cd32" style="background: #32cd32;" title="Verde"></div>
                <div class="color-btn" data-color="#00bfff" style="background: #00bfff;" title="Azzurro"></div>
                <div class="color-btn" data-color="#4169e1" style="background: #4169e1;" title="Blu"></div>
                <div class="color-btn" data-color="#8a2be2" style="background: #8a2be2;" title="Viola"></div>
                <div class="color-btn" data-color="#ff1493" style="background: #ff1493;" title="Rosa"></div>
            </div>
            <button class="start-btn" id="startGame" disabled>Inizia la Sfida!</button>
        </div>

        <!-- Gioco -->
        <div class="game-board" id="gameBoard">
            <div class="game-info">
                <div class="player-info">
                    <div class="player-token" id="playerTokenDisplay"></div>
                    <span>Tu</span>
                </div>
                <div class="current-turn" id="currentTurn">Il tuo turno</div>
                <div class="player-info">
                    <div class="player-token leone-token">
                        🦁
                    </div>
                    <span>Leone</span>
                </div>
            </div>

            <div class="board" id="board"></div>

            <div class="game-status" id="gameStatus"></div>

            <button class="reset-btn" id="resetGame">Nuova Partita</button>
        </div>
    </div>

    <script>
        // Classe per gestire le statistiche su GitHub (seguendo il pattern di scatola-tempo.astro)
        class GameStatsManager {
            constructor() {
                // GitHub configuration (stessa della scatola-tempo)
                this.GITHUB_TOKEN = 'WjJsMGFIVmlYM0JoZEY4eE1VRktWMVJhV0ZFd01HdHlkVTlSZGpOUlozRklYMVZuVDBObFdYVkVVMlo2ZEVsb1FtVkdNMjQ1ZDFab2RWSnBVbEZRVEZwVmRFMDJUR0p3ZEZneFRVRkxTVFJOVDFoQk5IcEhUa28wZGxkMg==';
                this.REPO_OWNER = 'KeyserDSoze';
                this.REPO_NAME = 'leone';
                this.STATS_LABEL = 'forza4-stats';
                this.STATS_ISSUE_TITLE = 'stats'; // Titolo semplice
                
                this.apiBase = `https://api.github.com/repos/${this.REPO_OWNER}/${this.REPO_NAME}`;
                this.statsIssueNumber = null;
                this.currentStats = { wins: 0, losses: 0, draws: 0 };
                
                this.init();
            }
            
            // Funzione per decodificare il token GitHub (doppia decodifica Base64)
            decodeToken() {
                try {
                    const firstDecode = atob(this.GITHUB_TOKEN);
                    const secondDecode = atob(firstDecode);
                    return secondDecode;
                } catch (error) {
                    console.error('Errore nella decodifica del token:', error);
                    return null;
                }
            }
            
            async init() {
                await this.ensureLabelExists();
                await this.loadStats();
                this.renderStats();
            }
            
            async ensureLabelExists() {
                try {
                    const decodedToken = this.decodeToken();
                    if (!decodedToken) return;
                    
                    const response = await fetch(`${this.apiBase}/labels/${this.STATS_LABEL}`, {
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });
                    
                    if (response.status === 404) {
                        console.log(`Label "${this.STATS_LABEL}" non trovato, lo creo...`);
                        
                        const createResponse = await fetch(`${this.apiBase}/labels`, {
                            method: 'POST',
                            headers: {
                                'Authorization': `token ${decodedToken}`,
                                'Accept': 'application/vnd.github.v3+json',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: this.STATS_LABEL,
                                description: 'Statistiche del gioco Forza 4 di Leone',
                                color: 'FF6B35' // Arancione
                            })
                        });
                        
                        if (createResponse.ok) {
                            console.log(`Label "${this.STATS_LABEL}" creato con successo!`);
                        }
                    }
                } catch (error) {
                    console.warn('Errore nel controllo/creazione label:', error);
                }
            }
            
            async loadStats() {
                try {
                    const decodedToken = this.decodeToken();
                    if (!decodedToken) {
                        console.warn('Token non disponibile, uso statistiche locali');
                        this.loadLocalStats();
                        return;
                    }
                    
                    // Cerca l'issue con titolo "stats"
                    const response = await fetch(`${this.apiBase}/issues?state=open`, {
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Errore GitHub API: ${response.status}`);
                    }
                    
                    const issues = await response.json();
                    const statsIssue = issues.find(issue => issue.title === this.STATS_ISSUE_TITLE);
                    
                    if (statsIssue) {
                        this.statsIssueNumber = statsIssue.number;
                        try {
                            const statsData = JSON.parse(statsIssue.body);
                            this.currentStats = { ...this.currentStats, ...statsData };
                            console.log('Statistiche caricate da GitHub (issue #' + this.statsIssueNumber + '):', this.currentStats);
                        } catch (parseError) {
                            console.warn('Errore nel parsing delle statistiche, uso valori di default:', parseError);
                        }
                    } else {
                        console.log('Issue "stats" non trovata, la creo...');
                        await this.createStatsIssue();
                    }
                    
                } catch (error) {
                    console.warn('Errore nel caricamento statistiche da GitHub:', error);
                    this.loadLocalStats();
                }
            }
            
            async createStatsIssue() {
                try {
                    const decodedToken = this.decodeToken();
                    if (!decodedToken) return;
                    
                    const response = await fetch(`${this.apiBase}/issues`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            title: this.STATS_ISSUE_TITLE, // Semplicemente "stats"
                            body: JSON.stringify(this.currentStats, null, 2),
                            labels: [this.STATS_LABEL]
                        })
                    });
                    
                    if (response.ok) {
                        const newIssue = await response.json();
                        this.statsIssueNumber = newIssue.number;
                        console.log('Issue "stats" creata con numero:', newIssue.number);
                    }
                } catch (error) {
                    console.error('Errore nella creazione dell\'issue "stats":', error);
                }
            }
            
            loadLocalStats() {
                const stored = localStorage.getItem('leone-forza4-stats');
                if (stored) {
                    try {
                        this.currentStats = { ...this.currentStats, ...JSON.parse(stored) };
                    } catch (error) {
                        console.warn('Errore nel caricamento statistiche locali');
                    }
                }
            }
            
            saveLocalStats() {
                localStorage.setItem('leone-forza4-stats', JSON.stringify(this.currentStats));
            }
            
            async updateStats(result) {
                // Aggiorna le statistiche locali
                this.currentStats[result]++;
                console.log(`Aggiornate statistiche - ${result}:`, this.currentStats);
                
                // Salva localmente
                this.saveLocalStats();
                
                // Aggiorna su GitHub
                await this.saveStatsToGitHub();
                
                // Aggiorna la visualizzazione
                this.renderStats();
            }
            
            async saveStatsToGitHub() {
                try {
                    const decodedToken = this.decodeToken();
                    if (!decodedToken) {
                        console.warn('Token non disponibile per GitHub');
                        return;
                    }
                    
                    // Se non abbiamo un numero di issue, proviamo a trovarla di nuovo
                    if (!this.statsIssueNumber) {
                        console.log('Numero issue non trovato, ricarico...');
                        await this.loadStats();
                        if (!this.statsIssueNumber) {
                            console.warn('Impossibile trovare o creare issue stats');
                            return;
                        }
                    }
                    
                    const response = await fetch(`${this.apiBase}/issues/${this.statsIssueNumber}`, {
                        method: 'PATCH',
                        headers: {
                            'Authorization': `token ${decodedToken}`,
                            'Accept': 'application/vnd.github.v3+json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            body: JSON.stringify(this.currentStats, null, 2)
                        })
                    });
                    
                    if (response.ok) {
                        console.log('Statistiche aggiornate su GitHub issue #' + this.statsIssueNumber);
                    } else {
                        console.warn('Errore nel salvataggio su GitHub:', response.status);
                    }
                    
                } catch (error) {
                    console.warn('Errore nel salvataggio su GitHub:', error);
                }
            }
            
            renderStats() {
                const statsContent = document.getElementById('statsContent');
                if (!statsContent) return;
                
                const totalGames = this.currentStats.wins + this.currentStats.losses + this.currentStats.draws;
                
                statsContent.innerHTML = `
                    <div class="stats-grid">
                        <div class="stat-item wins">
                            <span class="stat-number">${this.currentStats.wins}</span>
                            <span class="stat-label">Vittorie Leone</span>
                        </div>
                        <div class="stat-item losses">
                            <span class="stat-number">${this.currentStats.losses}</span>
                            <span class="stat-label">Sconfitte Leone</span>
                        </div>
                        <div class="stat-item draws">
                            <span class="stat-number">${this.currentStats.draws}</span>
                            <span class="stat-label">Pareggi</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: #666; margin-top: 0.5rem;">
                        <small>Partite totali: ${totalGames}</small>
                    </div>
                `;
            }
            
            getStats() {
                return { ...this.currentStats };
            }
        }

        class ForceQuattroLeone {
            constructor() {
                console.log('Forza 4 - Inizializzazione...');
                
                // Costanti di gioco
                this.ROWS = 6;
                this.COLS = 7;
                this.EMPTY = 0;
                this.PLAYER = 1;
                this.LEONE = 2;
                
                // Stato del gioco
                this.board = [];
                this.currentPlayer = this.PLAYER;
                this.gameOver = false;
                this.playerColor = null;
                this.leoneColor = '#e53935';
                
                // Inizializza quando il DOM è pronto
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', () => this.init());
                } else {
                    this.init();
                }
            }
            
            init() {
                console.log('Inizializzazione elementi DOM...');
                this.initializeElements();
                this.initializeBoard();
                this.setupEventListeners();
                console.log('Gioco pronto!');
            }
            
            initializeElements() {
                this.playerSelection = document.getElementById('playerSelection');
                this.gameBoard = document.getElementById('gameBoard');
                this.boardElement = document.getElementById('board');
                this.currentTurnElement = document.getElementById('currentTurn');
                this.gameStatusElement = document.getElementById('gameStatus');
                this.playerTokenDisplay = document.getElementById('playerTokenDisplay');
                this.startGameBtn = document.getElementById('startGame');
                this.resetGameBtn = document.getElementById('resetGame');
                
                console.log('Elementi DOM:', {
                    board: !!this.boardElement,
                    selection: !!this.playerSelection,
                    gameBoard: !!this.gameBoard
                });
            }
            
            initializeBoard() {
                // Crea matrice vuota 6x7
                this.board = [];
                for (let row = 0; row < this.ROWS; row++) {
                    this.board[row] = [];
                    for (let col = 0; col < this.COLS; col++) {
                        this.board[row][col] = this.EMPTY;
                    }
                }
                console.log('Board inizializzata:', this.board.length + 'x' + this.board[0].length);
                // Non renderizzare qui - solo quando il gioco inizia
            }
            
            setupEventListeners() {
                // Gestione selezione colori
                const colorBtns = document.querySelectorAll('.color-btn');
                console.log('Bottoni colore trovati:', colorBtns.length);
                
                colorBtns.forEach((btn, index) => {
                    btn.addEventListener('click', (e) => {
                        console.log(`Colore selezionato: ${e.target.dataset.color}`);
                        
                        // Reset selezioni precedenti
                        colorBtns.forEach(b => b.classList.remove('selected'));
                        
                        // Seleziona il nuovo colore
                        e.target.classList.add('selected');
                        this.playerColor = e.target.dataset.color;
                        
                        // Aggiorna preview
                        if (this.playerTokenDisplay) {
                            this.playerTokenDisplay.style.background = this.playerColor;
                        }
                        
                        // Abilita start button
                        if (this.startGameBtn) {
                            this.startGameBtn.disabled = false;
                        }
                    });
                });
                
                // Start game
                if (this.startGameBtn) {
                    this.startGameBtn.addEventListener('click', () => {
                        console.log('Avvio gioco!');
                        this.startGame();
                    });
                }
                
                // Reset game
                if (this.resetGameBtn) {
                    this.resetGameBtn.addEventListener('click', () => {
                        console.log('Reset gioco!');
                        this.resetGame();
                    });
                }
            }
            
            startGame() {
                console.log('=== START GAME ===');
                console.log('Player color selected:', this.playerColor);
                
                if (this.playerSelection) {
                    this.playerSelection.style.display = 'none';
                    console.log('✅ Player selection nascosta');
                }
                
                if (this.gameBoard) {
                    this.gameBoard.classList.add('active');
                    this.gameBoard.style.display = 'block';
                    console.log('✅ Game board mostrata');
                }
                
                // Forza il rendering della board
                console.log('🔄 Forzando rendering board...');
                this.updateTurnDisplay();
                
                // Doppio rendering per sicurezza
                setTimeout(() => {
                    this.renderBoard();
                    console.log('🔄 Secondo rendering completato');
                }, 100);
                
                this.renderBoard();
                console.log('=== START GAME COMPLETE ===');
            }
            
            renderBoard() {
                console.log('=== RENDER BOARD START ===');
                
                const boardEl = document.getElementById('board');
                console.log('✅ Board element trovato:', !!boardEl);
                
                if (!boardEl) {
                    console.error('❌ Element board non trovato!');
                    return;
                }
                
                console.log('✅ Board size:', this.board?.length, 'x', this.board?.[0]?.length);
                
                // Pulisci la board
                boardEl.innerHTML = '';
                
                // Debug styling
                boardEl.style.border = '3px solid red';
                boardEl.style.minHeight = '300px';
                boardEl.style.background = '#1976d2';
                
                // Crea semplicemente 42 celle (6x7)
                for (let i = 0; i < 42; i++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    
                    // Calcola riga e colonna
                    const row = Math.floor(i / 7);
                    const col = i % 7;
                    
                    cell.dataset.row = row.toString();
                    cell.dataset.col = col.toString();
                    
                    // Stile base
                        const isDesktop = window.innerWidth >= 1024;
                        const size = isDesktop ? 54 : 40;
                        cell.style.cssText = `
                            background: white;
                            border: 2px solid #333;
                            border-radius: 50%;
                            aspect-ratio: 1;
                            min-width: ${size}px;
                            min-height: ${size}px;
                            cursor: pointer;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                        `;
                    
                    // Controlla se c'è un token
                    if (this.board && this.board[row] && this.board[row][col] !== this.EMPTY) {
                        if (this.board[row][col] === this.PLAYER && this.playerColor) {
                            cell.style.background = this.playerColor;
                        } else if (this.board[row][col] === this.LEONE) {
                            // Token di Leone: testa di leone grande che riempie tutta la cella
                            cell.style.background = '#fff8dc'; // Sfondo crema chiaro per contrasto
                            cell.innerHTML = '🦁';
                            cell.style.fontSize = '36px'; // Testa di leone molto più grande
                            cell.style.lineHeight = '1';
                            cell.style.display = 'flex';
                            cell.style.alignItems = 'center';
                            cell.style.justifyContent = 'center';
                        }
                    }
                    
                    // Click handler
                    cell.addEventListener('click', () => {
                        console.log(`🖱️ Click colonna: ${col}`);
                        if (!this.gameOver && this.currentPlayer === this.PLAYER) {
                            this.makeMove(col);
                        }
                    });
                    
                    boardEl.appendChild(cell);
                    console.log(`📦 Cella ${i} aggiunta (${row},${col})`);
                }
                
                console.log('✅ RENDER COMPLETATO - Celle totali:', boardEl.children.length);
            }
            
            makeMove(col) {
                console.log(`Tentativo mossa colonna ${col}`);
                
                if (this.gameOver || !this.canDropPiece(col)) {
                    console.log('Mossa non valida');
                    return;
                }
                
                const row = this.dropPiece(col, this.currentPlayer);
                if (row === -1) {
                    console.log('Impossibile droppare in colonna ' + col);
                    return;
                }
                
                console.log(`Token piazzato in ${row},${col}`);
                this.renderBoard();
                
                // Controlla vittoria
                if (this.checkWin(row, col, this.currentPlayer)) {
                    this.gameOver = true;
                    if (this.currentPlayer === this.PLAYER) {
                        this.gameStatusElement.textContent = '🎉 Hai vinto! Incredibile!';
                        // Leone ha perso
                        if (window.gameStats) window.gameStats.updateStats('losses');
                    } else {
                        this.gameStatusElement.textContent = '🦁 Leone ha vinto!';
                        // Leone ha vinto
                        if (window.gameStats) window.gameStats.updateStats('wins');
                    }
                    console.log('Partita finita');
                    return;
                }
                
                // Controlla pareggio
                if (this.isBoardFull()) {
                    this.gameOver = true;
                    this.gameStatusElement.textContent = '🤝 Pareggio! Leone è soddisfatto!';
                    // Pareggio
                    if (window.gameStats) window.gameStats.updateStats('draws');
                    console.log('Pareggio!');
                    return;
                }
                
                // Cambia turno
                this.currentPlayer = this.currentPlayer === this.PLAYER ? this.LEONE : this.PLAYER;
                this.updateTurnDisplay();
                
                // Turno dell'AI (Leone)
                if (this.currentPlayer === this.LEONE && !this.gameOver) {
                    console.log('Turno di Leone...');
                    setTimeout(() => {
                        const aiCol = this.getBestMove();
                        console.log(`Leone sceglie colonna: ${aiCol}`);
                        
                        const aiRow = this.dropPiece(aiCol, this.LEONE);
                        this.renderBoard();
                        
                        if (this.checkWin(aiRow, aiCol, this.LEONE)) {
                            this.gameOver = true;
                            this.gameStatusElement.textContent = '🦁 Leone ha vinto! Era inevitabile!';
                            // Leone ha vinto
                            if (window.gameStats) window.gameStats.updateStats('wins');
                            return;
                        }
                        
                        if (this.isBoardFull()) {
                            this.gameOver = true;
                            this.gameStatusElement.textContent = '🤝 Pareggio! Leone è soddisfatto!';
                            // Pareggio
                            if (window.gameStats) window.gameStats.updateStats('draws');
                            return;
                        }
                        
                        this.currentPlayer = this.PLAYER;
                        this.updateTurnDisplay();
                    }, 1500);
                }
            }
            
            canDropPiece(col) {
                return this.board[0][col] === this.EMPTY;
            }
            
            dropPiece(col, player) {
                for (let row = this.ROWS - 1; row >= 0; row--) {
                    if (this.board[row][col] === this.EMPTY) {
                        this.board[row][col] = player;
                        return row;
                    }
                }
                return -1;
            }
            
            checkWin(row, col, player) {
                return this.checkDirection(row, col, player, 0, 1) ||  // orizzontale
                       this.checkDirection(row, col, player, 1, 0) ||  // verticale
                       this.checkDirection(row, col, player, 1, 1) ||  // diagonale \
                       this.checkDirection(row, col, player, 1, -1);   // diagonale /
            }
            
            checkDirection(row, col, player, deltaRow, deltaCol) {
                let count = 1;
                
                // Controlla una direzione
                for (let i = 1; i < 4; i++) {
                    const newRow = row + i * deltaRow;
                    const newCol = col + i * deltaCol;
                    if (newRow < 0 || newRow >= this.ROWS || newCol < 0 || newCol >= this.COLS || 
                        this.board[newRow][newCol] !== player) break;
                    count++;
                }
                
                // Controlla direzione opposta
                for (let i = 1; i < 4; i++) {
                    const newRow = row - i * deltaRow;
                    const newCol = col - i * deltaCol;
                    if (newRow < 0 || newRow >= this.ROWS || newCol < 0 || newCol >= this.COLS || 
                        this.board[newRow][newCol] !== player) break;
                    count++;
                }
                
                return count >= 4;
            }
            
            isBoardFull() {
                return this.board[0].every(cell => cell !== this.EMPTY);
            }
            
            updateTurnDisplay() {
                if (this.gameOver || !this.currentTurnElement) return;
                this.currentTurnElement.textContent = 
                    this.currentPlayer === this.PLAYER ? 'Il tuo turno' : 'Turno di Leone';
            }
            
            // AI VELOCE - Minimax semplificato
            getBestMove() {
                // Priorità 1: Vinci se puoi
                for (let col = 0; col < this.COLS; col++) {
                    if (this.canDropPiece(col)) {
                        const row = this.findLowestRow(col);
                        this.board[row][col] = this.LEONE;
                        if (this.hasWinningPosition(this.LEONE)) {
                            this.board[row][col] = this.EMPTY;
                            return col;
                        }
                        this.board[row][col] = this.EMPTY;
                    }
                }
                
                // Priorità 2: Blocca il giocatore se sta per vincere
                for (let col = 0; col < this.COLS; col++) {
                    if (this.canDropPiece(col)) {
                        const row = this.findLowestRow(col);
                        this.board[row][col] = this.PLAYER;
                        if (this.hasWinningPosition(this.PLAYER)) {
                            this.board[row][col] = this.EMPTY;
                            return col;
                        }
                        this.board[row][col] = this.EMPTY;
                    }
                }
                
                // Priorità 3: Minimax veloce
                let bestScore = -Infinity;
                let bestCol = 3; // Default centro
                
                for (let col = 0; col < this.COLS; col++) {
                    if (this.canDropPiece(col)) {
                        const row = this.findLowestRow(col);
                        this.board[row][col] = this.LEONE;
                        
                        const score = this.minimax(0, false, -Infinity, Infinity);
                        this.board[row][col] = this.EMPTY;
                        
                        if (score > bestScore) {
                            bestScore = score;
                            bestCol = col;
                        }
                    }
                }
                
                return bestCol;
            }
            
            minimax(depth, isMaximizing, alpha, beta) {
                const leoneWin = this.hasWinningPosition(this.LEONE);
                const playerWin = this.hasWinningPosition(this.PLAYER);
                
                if (leoneWin) return 1000 - depth;
                if (playerWin) return -1000 + depth;
                if (this.isBoardFull() || depth >= 6) { // Riduciamo a 6 per velocità
                    return this.evaluatePositionFast(); // Versione veloce
                }
                
                if (isMaximizing) {
                    let maxEval = -Infinity;
                    for (let col = 0; col < this.COLS; col++) {
                        if (this.canDropPiece(col)) {
                            const row = this.findLowestRow(col);
                            this.board[row][col] = this.LEONE;
                            const evaluation = this.minimax(depth + 1, false, alpha, beta);
                            this.board[row][col] = this.EMPTY;
                            maxEval = Math.max(maxEval, evaluation);
                            alpha = Math.max(alpha, evaluation);
                            if (beta <= alpha) break;
                        }
                    }
                    return maxEval;
                } else {
                    let minEval = Infinity;
                    for (let col = 0; col < this.COLS; col++) {
                        if (this.canDropPiece(col)) {
                            const row = this.findLowestRow(col);
                            this.board[row][col] = this.PLAYER;
                            const evaluation = this.minimax(depth + 1, true, alpha, beta);
                            this.board[row][col] = this.EMPTY;
                            minEval = Math.min(minEval, evaluation);
                            beta = Math.min(beta, evaluation);
                            if (beta <= alpha) break;
                        }
                    }
                    return minEval;
                }
            }
            
            // Valutazione veloce - solo posizioni centrali
            evaluatePositionFast() {
                let score = 0;
                const centerCol = 3;
                
                // Conta pezzi nelle colonne centrali (più veloce)
                for (let row = 0; row < this.ROWS; row++) {
                    for (let col = Math.max(0, centerCol - 2); col <= Math.min(this.COLS - 1, centerCol + 2); col++) {
                        if (this.board[row][col] === this.LEONE) {
                            score += (centerCol + 3 - Math.abs(col - centerCol));
                        } else if (this.board[row][col] === this.PLAYER) {
                            score -= (centerCol + 3 - Math.abs(col - centerCol));
                        }
                    }
                }
                
                return score;
            }
            
            // Valutazione posizionale completa (mantenuta per completezza)
            evaluatePosition() {
                let score = 0;
                
                // Favorisce le posizioni centrali
                for (let row = 0; row < this.ROWS; row++) {
                    for (let col = 0; col < this.COLS; col++) {
                        if (this.board[row][col] === this.LEONE) {
                            score += this.getPositionValue(row, col);
                        } else if (this.board[row][col] === this.PLAYER) {
                            score -= this.getPositionValue(row, col);
                        }
                    }
                }
                
                // Valuta sequenze parziali
                score += this.evaluateSequences(this.LEONE) * 10;
                score -= this.evaluateSequences(this.PLAYER) * 10;
                
                return score;
            }
            
            getPositionValue(row, col) {
                // Centro vale di più
                const centerCol = Math.floor(this.COLS / 2);
                const distanceFromCenter = Math.abs(col - centerCol);
                return (4 - distanceFromCenter) + (this.ROWS - row);
            }
            
            evaluateSequences(player) {
                let score = 0;
                
                // Controlla sequenze di 2 e 3 pezzi
                for (let row = 0; row < this.ROWS; row++) {
                    for (let col = 0; col < this.COLS; col++) {
                        // Orizzontale
                        score += this.countSequence(row, col, 0, 1, player);
                        // Verticale
                        score += this.countSequence(row, col, 1, 0, player);
                        // Diagonale \
                        score += this.countSequence(row, col, 1, 1, player);
                        // Diagonale /
                        score += this.countSequence(row, col, 1, -1, player);
                    }
                }
                
                return score;
            }
            
            countSequence(row, col, dRow, dCol, player) {
                let count = 0;
                let empty = 0;
                
                for (let i = 0; i < 4; i++) {
                    const r = row + i * dRow;
                    const c = col + i * dCol;
                    
                    if (r < 0 || r >= this.ROWS || c < 0 || c >= this.COLS) return 0;
                    
                    if (this.board[r][c] === player) {
                        count++;
                    } else if (this.board[r][c] === this.EMPTY) {
                        empty++;
                    } else {
                        return 0; // Bloccato dall'avversario
                    }
                }
                
                if (count === 3 && empty === 1) return 50;
                if (count === 2 && empty === 2) return 10;
                if (count === 1 && empty === 3) return 1;
                
                return 0;
            }
            
            hasWinningPosition(player) {
                for (let row = 0; row < this.ROWS; row++) {
                    for (let col = 0; col < this.COLS; col++) {
                        if (this.board[row][col] === player) {
                            if (this.checkWin(row, col, player)) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
            
            findLowestRow(col) {
                for (let row = this.ROWS - 1; row >= 0; row--) {
                    if (this.board[row][col] === this.EMPTY) {
                        return row;
                    }
                }
                return -1;
            }
            
            resetGame() {
                console.log('Reset del gioco...');
                
                this.gameOver = false;
                this.currentPlayer = this.PLAYER;
                this.playerColor = null;
                this.initializeBoard();
                
                if (this.gameStatusElement) this.gameStatusElement.textContent = '';
                if (this.playerSelection) this.playerSelection.style.display = 'block';
                if (this.gameBoard) {
                    this.gameBoard.classList.remove('active');
                    this.gameBoard.style.display = 'none';
                }
                if (this.startGameBtn) this.startGameBtn.disabled = true;
                if (this.playerTokenDisplay) this.playerTokenDisplay.style.background = '';
                
                document.querySelectorAll('.color-btn').forEach(btn => btn.classList.remove('selected'));
            }
        }
        
        // Variabili globali per le statistiche
        let gameStats;
        
        // Avvia il gioco e le statistiche
        console.log('Caricamento Forza 4 con statistiche...');
        
        // Inizializza le statistiche
        gameStats = new GameStatsManager();
        window.gameStats = gameStats; // Rendi disponibile globalmente
        
        // Inizializza il gioco
        new ForceQuattroLeone();
    </script>
</body>
</html>
